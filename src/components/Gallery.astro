---
import path from "path";
import { Image } from "astro:assets";
import Lightbox from "./Lightbox.astro";
import type { ImageMetadata } from "astro";
import {
  getImageMetadata,
  readImageMetadata,
} from "../scripts/getImageData.ts";
import { shuffleArray } from "../scripts/utils.ts";

interface Props {
  img_metadata: Record<string, any>;
}

const { img_metadata } = Astro.props;

const metadata: ImageMetadata[] = img_metadata.map(
  (file: Record<string, any>) => file.default,
);

const image_spans = metadata.map((image) =>
  image.width / image.height > 1.5 ? 2 : 1,
);

const getName = (image: ImageMetadata): string =>
  path.basename(image.src).split("?")[0];

const image_width = 400;
const image_width_str = image_width.toString() + "px";
const img_margin = 16; // 1rem
const img_margin_str = img_margin.toString() + "px";
---

<div class="gallery" id="gallery">
  {
    metadata.map((image: ImageMetadata, idx: number) => (
      <a
        href={"#" + getName(image)}
        class="img-wrapper"
        style={"grid-column-end: span " + image_spans[idx].toString()}
      >
        <Image
          class="gallery-img"
          src={image}
          alt=""
          width={image_width}
          widths={[240, 540, 720, image.width]}
          sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${image.width}px`}
        />
      </a>
    ))
  }
</div>

<Lightbox img_metadata={img_metadata} />

<script is:inline>
  let shuffleArray = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  };

  let shuffleGallery = () => {
    gallery = document.getElementById("gallery");
    images = Array.from(document.getElementsByClassName("img-wrapper"));

    shuffleArray(images);

    images.forEach((img) => gallery.removeChild(img));
    images.forEach((img) => gallery.appendChild(img));

    gallery.classList.add("visible");
  };

  document.addEventListener("astro:page-load", shuffleGallery);
</script>

<style define:vars={{ img_margin_str, image_width_str }}>
  .gallery {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    align-content: center;
    padding: 2rem max(10px, 2vw);
    gap: calc(var(--img_margin_str) * 2);
    height: max-content;
    opacity: 0;
    transition: opacity 250ms;
    will-change: opacity, scroll-position:
  }

  .gallery.visible {
    opacity: 1;
  }

  .img-wrapper{
    will-change: scroll-position;
  }

  .gallery-img {
    display: block;
    margin: -1px;
    padding: 0;
    line-height: 0;
    height: 100%;
    object-fit: cover;
    cursor: zoom-in;
    border-radius: 6px;
    box-shadow: 1.5px 2px 7px 0.5px gray;
    will-change: scroll-position;
  }

  @supports (grid-template-rows: masonry) {
    .gallery {
      display: grid;
      grid-template-rows: masonry;
      grid-template-columns: repeat(auto-fill, var(--image_width_str));
      align-content: baseline;
      justify-content: center;
    }
  }
</style>

<script is:inline define:vars={{ img_margin, image_width }}>
  function setGalleryDims() {
    let gallery = document.getElementById("gallery");
    let gallery_style = null;
    if (gallery) gallery_style = window.getComputedStyle(gallery);

    const images = Array.from(document.getElementsByClassName("gallery-img"));

    if (gallery_style && gallery_style.display == "flex") {
      // When the display style is flex, mansory layout is not enabled

      const ww = document.body.clientWidth;

      const heights = images.map((img) => img.offsetHeight + 2 * img_margin);
      const sum_heights = heights.reduce((sum, next) => sum + next, 0);
      const avg_height = sum_heights / heights.length;
      const widths = images.map((img) => img.offsetWidth + 2 * img_margin);
      const num_cols = Math.floor(ww / widths[0]);

      // extra height to prevent uneven image sizes from creating an extra column
      const gallery_height = sum_heights / num_cols + avg_height;

      const gallery = document.getElementById("gallery");
      if (gallery) gallery.style.height = `${gallery_height}px`;
    } else if (gallery_style) {
      // For the masonry layout, we span wide images across 2 columns

      let image_spans = images.map((image) =>
        image.naturalWidth / image.naturalHeight > 1.5 ? 2 : 1,
      );

      images.forEach((img, idx) => {
        img.style.width =
          (
            image_spans[idx] * image_width +
            (image_spans[idx] - 1) * img_margin * 2
          ).toString() + "px";
      });
    }
  }

  setGalleryDims();
  window.addEventListener("resize", setGalleryDims);
  document.addEventListener("astro:after-swap", setGalleryDims);
</script>
